# 1. Convert to Stock problem
class Solution:
    
    def maxSubArray(self, nums: List[int]) -> int:
        
        acc = [nums[0]]
        
        for i in range(1, len(nums)):
            acc.append(acc[-1]+nums[i])
            
        low = 0
        res = -float('inf')
        
        for i in range(len(nums)):
            res = max(res, acc[i] - low)
            low = min(acc[i], low)
            
        return res
        
# 2. DP
# DP[i] = maximum subarray ends at index i, basically we traverse and choose if to include previous dp[i-1]

class Solution:
    
    def maxSubArray(self, nums: List[int]) -> int:

        dp = [0]*len(nums)
        dp[0] = nums[0]
        res = nums[0]
        
        for i in range(1, len(nums)):
            dp[i] = max(0, dp[i-1]) + nums[i]
            res = max(res, dp[i])
            
        return res 
        